# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CubeEye
else:
    import _CubeEye

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CubeEye.delete_SwigPyIterator

    def value(self):
        return _CubeEye.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CubeEye.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CubeEye.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CubeEye.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CubeEye.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CubeEye.SwigPyIterator_copy(self)

    def next(self):
        return _CubeEye.SwigPyIterator_next(self)

    def __next__(self):
        return _CubeEye.SwigPyIterator___next__(self)

    def previous(self):
        return _CubeEye.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CubeEye.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CubeEye.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CubeEye.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CubeEye.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CubeEye.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CubeEye.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CubeEye.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CubeEye:
_CubeEye.SwigPyIterator_swigregister(SwigPyIterator)
Result_Unknown = _CubeEye.Result_Unknown
r"""Unknown result"""
Result_Success = _CubeEye.Result_Success
r"""No error"""
Result_Fail = _CubeEye.Result_Fail
r"""An unknown failure has occurred"""
Result_Empty = _CubeEye.Result_Empty
r"""Queue buffer or data empty"""
Result_Overflow = _CubeEye.Result_Overflow
r"""Buffer overflow"""
Result_NotFound = _CubeEye.Result_NotFound
r"""No such item"""
Result_NotExist = _CubeEye.Result_NotExist
r"""Not exist item"""
Result_NotReady = _CubeEye.Result_NotReady
r"""Is not ready state"""
Result_NotSupported = _CubeEye.Result_NotSupported
r"""Not supported item"""
Result_NotImplemented = _CubeEye.Result_NotImplemented
r"""The function not implemented"""
Result_NotInitialized = _CubeEye.Result_NotInitialized
r"""The Device was not initialized"""
Result_NoSuchDevice = _CubeEye.Result_NoSuchDevice
r"""No such device"""
Result_NoSuchFile = _CubeEye.Result_NoSuchFile
r"""No such file"""
Result_NoSuchNetworkInterface = _CubeEye.Result_NoSuchNetworkInterface
r"""No such network interface"""
Result_NoResponse = _CubeEye.Result_NoResponse
r"""No response"""
Result_InvalidParameter = _CubeEye.Result_InvalidParameter
r"""Some parameter is invalid"""
Result_InvalidOperation = _CubeEye.Result_InvalidOperation
r"""Device operation is invalid"""
Result_InvalidDataType = _CubeEye.Result_InvalidDataType
r"""Data type is invalid"""
Result_InvalidChecksum = _CubeEye.Result_InvalidChecksum
r"""Checksum is invalid"""
Result_InvalidCompatibilityIndex = _CubeEye.Result_InvalidCompatibilityIndex
r"""Compatibility is invalid"""
Result_OutOfMemory = _CubeEye.Result_OutOfMemory
r"""Out of memory"""
Result_OutOfResource = _CubeEye.Result_OutOfResource
r"""Out of resource"""
Result_OutOfRange = _CubeEye.Result_OutOfRange
r"""Out of range"""
Result_AlreadyExists = _CubeEye.Result_AlreadyExists
r"""The item is already exists"""
Result_AlreadyOpened = _CubeEye.Result_AlreadyOpened
r"""The Device was already opened"""
Result_AlreadyRunning = _CubeEye.Result_AlreadyRunning
r"""The Device was already running"""
Result_AlreadyInitialized = _CubeEye.Result_AlreadyInitialized
r"""The Device was already initialized"""
Result_UsingResources = _CubeEye.Result_UsingResources
r"""The resource is using"""
Result_Timeout = _CubeEye.Result_Timeout
r"""Time out"""
DataType_Unknown = _CubeEye.DataType_Unknown
r"""Unknown"""
DataType_Boolean = _CubeEye.DataType_Boolean
r"""Boolean"""
DataType_S8 = _CubeEye.DataType_S8
r"""8bit signed integer"""
DataType_U8 = _CubeEye.DataType_U8
r"""8bit unsigned integer"""
DataType_S16 = _CubeEye.DataType_S16
r"""16bit signed integer"""
DataType_U16 = _CubeEye.DataType_U16
r"""16bit unsigned integer"""
DataType_S32 = _CubeEye.DataType_S32
r"""32bit signed integer"""
DataType_U32 = _CubeEye.DataType_U32
r"""32bit unsigned integer"""
DataType_F32 = _CubeEye.DataType_F32
r"""32bit floating-point number"""
DataType_S64 = _CubeEye.DataType_S64
r"""64bit signed integer"""
DataType_U64 = _CubeEye.DataType_U64
r"""64bit unsigned integer"""
DataType_F64 = _CubeEye.DataType_F64
r"""64bit floating-point number"""
DataType_Bytes = _CubeEye.DataType_Bytes
r"""Byte array"""
DataType_String = _CubeEye.DataType_String
r"""String : std::string"""
FrameType_Unknown = _CubeEye.FrameType_Unknown
r"""Unknown frame"""
FrameType_Raw = _CubeEye.FrameType_Raw
r"""Raw frame"""
FrameType_Depth = _CubeEye.FrameType_Depth
r"""Depth frame"""
FrameType_Amplitude = _CubeEye.FrameType_Amplitude
r"""Amplitude frame"""
FrameType_Intensity = _CubeEye.FrameType_Intensity
r"""Intensity frame"""
FrameType_ZImage = _CubeEye.FrameType_ZImage
r"""ZImage frame"""
FrameType_PointCloud = _CubeEye.FrameType_PointCloud
r"""Converted 3D Point(x, y, z:depth) frame"""
FrameType_ConfidenceMap = _CubeEye.FrameType_ConfidenceMap
r"""Confidence values in image coordinates for Z and distance values"""
FrameType_RGB = _CubeEye.FrameType_RGB
r"""RGB frame"""
FrameType_RegisteredDepth = _CubeEye.FrameType_RegisteredDepth
r"""Registered Depth frame"""
FrameType_RegisteredRGB = _CubeEye.FrameType_RegisteredRGB
r"""Registered RGB frame"""
FrameType_IntensityPointCloud = _CubeEye.FrameType_IntensityPointCloud
r"""Converted Intensity & 3D Point(x, y, z:depth, i:intensity) frame"""
FrameType_RegisteredPointCloud = _CubeEye.FrameType_RegisteredPointCloud
r"""Converted registered 3D Point(x, y, z:depth) frame"""
CameraState_Released = _CubeEye.CameraState_Released
r"""Closed state of CubeEyeCamera"""
CameraState_Prepared = _CubeEye.CameraState_Prepared
r"""Prepared state of CubeEyeCamera"""
CameraState_Stopped = _CubeEye.CameraState_Stopped
r"""Stopped state of CubeEyeCamera"""
CameraState_Running = _CubeEye.CameraState_Running
r"""Running state of CubeEyeCamera"""
CameraType_Unknown = _CubeEye.CameraType_Unknown
r"""Unknown Camera"""
CameraType_ToF = _CubeEye.CameraType_ToF
r"""ToF Camera"""
CameraType_RGB = _CubeEye.CameraType_RGB
r"""RGB Camera"""
CameraError_Unknown = _CubeEye.CameraError_Unknown
r"""Unknown error"""
CameraError_IO = _CubeEye.CameraError_IO
r"""IO error"""
CameraError_AccessDenied = _CubeEye.CameraError_AccessDenied
r"""Access denied"""
CameraError_NoSuchDevice = _CubeEye.CameraError_NoSuchDevice
r"""No suce device"""
CameraError_Busy = _CubeEye.CameraError_Busy
r"""Busy"""
CameraError_Timeout = _CubeEye.CameraError_Timeout
r"""Timeout"""
CameraError_Overflow = _CubeEye.CameraError_Overflow
r"""Overflow"""
CameraError_Interrupted = _CubeEye.CameraError_Interrupted
r"""Interrupted"""
CameraError_Internal = _CubeEye.CameraError_Internal
r"""Internal"""
CameraError_FrameDropped = _CubeEye.CameraError_FrameDropped
r"""Frame dropped"""
CameraError_IlluminationLock = _CubeEye.CameraError_IlluminationLock
r"""Illumination lock failed"""
CameraError_NoFramesReceived = _CubeEye.CameraError_NoFramesReceived
r"""No frame received"""
class bytes(object):
    r"""Proxy of C++ std::vector< uint8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _CubeEye.bytes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _CubeEye.bytes___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _CubeEye.bytes___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< uint8_t >::size_type"""
        return _CubeEye.bytes___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> std::vector< uint8_t,std::allocator< uint8_t > > *"""
        return _CubeEye.bytes___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _CubeEye.bytes___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _CubeEye.bytes___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _CubeEye.bytes___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> std::vector< uint8_t,std::allocator< uint8_t > >
        __getitem__(self, i) -> std::vector< uint8_t >::value_type const &
        """
        return _CubeEye.bytes___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _CubeEye.bytes___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< uint8_t >::value_type"""
        return _CubeEye.bytes_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _CubeEye.bytes_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _CubeEye.bytes_empty(self)

    def size(self):
        r"""size(self) -> std::vector< uint8_t >::size_type"""
        return _CubeEye.bytes_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _CubeEye.bytes_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< uint8_t >::iterator"""
        return _CubeEye.bytes_begin(self)

    def end(self):
        r"""end(self) -> std::vector< uint8_t >::iterator"""
        return _CubeEye.bytes_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< uint8_t >::reverse_iterator"""
        return _CubeEye.bytes_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< uint8_t >::reverse_iterator"""
        return _CubeEye.bytes_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _CubeEye.bytes_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< uint8_t >::allocator_type"""
        return _CubeEye.bytes_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _CubeEye.bytes_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< uint8_t >::iterator
        erase(self, first, last) -> std::vector< uint8_t >::iterator
        """
        return _CubeEye.bytes_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> bytes
        __init__(self, other) -> bytes
        __init__(self, size) -> bytes
        __init__(self, size, value) -> bytes
        """
        _CubeEye.bytes_swiginit(self, _CubeEye.new_bytes(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _CubeEye.bytes_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< uint8_t >::value_type const &"""
        return _CubeEye.bytes_front(self)

    def back(self):
        r"""back(self) -> std::vector< uint8_t >::value_type const &"""
        return _CubeEye.bytes_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _CubeEye.bytes_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _CubeEye.bytes_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< uint8_t >::iterator
        insert(self, pos, n, x)
        """
        return _CubeEye.bytes_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _CubeEye.bytes_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< uint8_t >::size_type"""
        return _CubeEye.bytes_capacity(self)
    __swig_destroy__ = _CubeEye.delete_bytes

# Register bytes in _CubeEye:
_CubeEye.bytes_swigregister(bytes)
SHARED_PTR_DISOWN = _CubeEye.SHARED_PTR_DISOWN

class Property(object):
    r"""Proxy of C++ Property class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, property):
        r"""__init__(self, property) -> Property"""
        _CubeEye.Property_swiginit(self, _CubeEye.new_Property(property))
    __swig_destroy__ = _CubeEye.delete_Property

    def isArray(self):
        r"""isArray(self) -> bool"""
        return _CubeEye.Property_isArray(self)

    def isNumeric(self):
        r"""isNumeric(self) -> bool"""
        return _CubeEye.Property_isNumeric(self)

    def isIntegral(self):
        r"""isIntegral(self) -> bool"""
        return _CubeEye.Property_isIntegral(self)

    def isString(self):
        r"""isString(self) -> bool"""
        return _CubeEye.Property_isString(self)

    def dataType(self):
        r"""dataType(self) -> meere::sensor::DataType"""
        return _CubeEye.Property_dataType(self)

    def key(self):
        r"""key(self) -> std::string"""
        return _CubeEye.Property_key(self)

    def asBoolean(self):
        r"""asBoolean(self) -> bool"""
        return _CubeEye.Property_asBoolean(self)

    def asInt8s(self):
        r"""asInt8s(self) -> int8_t"""
        return _CubeEye.Property_asInt8s(self)

    def asInt8u(self):
        r"""asInt8u(self) -> uint8_t"""
        return _CubeEye.Property_asInt8u(self)

    def asInt16s(self):
        r"""asInt16s(self) -> int16_t"""
        return _CubeEye.Property_asInt16s(self)

    def asInt16u(self):
        r"""asInt16u(self) -> uint16_t"""
        return _CubeEye.Property_asInt16u(self)

    def asInt32s(self):
        r"""asInt32s(self) -> int32_t"""
        return _CubeEye.Property_asInt32s(self)

    def asInt32u(self):
        r"""asInt32u(self) -> uint32_t"""
        return _CubeEye.Property_asInt32u(self)

    def asInt64s(self):
        r"""asInt64s(self) -> int64_t"""
        return _CubeEye.Property_asInt64s(self)

    def asInt64u(self):
        r"""asInt64u(self) -> uint64_t"""
        return _CubeEye.Property_asInt64u(self)

    def asFlt32(self):
        r"""asFlt32(self) -> float"""
        return _CubeEye.Property_asFlt32(self)

    def asFlt64(self):
        r"""asFlt64(self) -> double"""
        return _CubeEye.Property_asFlt64(self)

    def asBytes(self):
        r"""asBytes(self) -> std::vector< uint8_t,std::allocator< uint8_t > >"""
        return _CubeEye.Property_asBytes(self)

    def asString(self):
        r"""asString(self) -> std::string"""
        return _CubeEye.Property_asString(self)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.Property_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.Property___repr__(self)

# Register Property in _CubeEye:
_CubeEye.Property_swigregister(Property)

def set_property(property):
    r"""set_property(property) -> int"""
    return _CubeEye.set_property(property)


def make_property_bool(key, data):
    r"""make_property_bool(key, data) -> sptr_property"""
    return _CubeEye.make_property_bool(key, data)

def make_property_8s(key, data):
    r"""make_property_8s(key, data) -> sptr_property"""
    return _CubeEye.make_property_8s(key, data)

def make_property_8u(key, data):
    r"""make_property_8u(key, data) -> sptr_property"""
    return _CubeEye.make_property_8u(key, data)

def make_property_16s(key, data):
    r"""make_property_16s(key, data) -> sptr_property"""
    return _CubeEye.make_property_16s(key, data)

def make_property_16u(key, data):
    r"""make_property_16u(key, data) -> sptr_property"""
    return _CubeEye.make_property_16u(key, data)

def make_property_32s(key, data):
    r"""make_property_32s(key, data) -> sptr_property"""
    return _CubeEye.make_property_32s(key, data)

def make_property_32u(key, data):
    r"""make_property_32u(key, data) -> sptr_property"""
    return _CubeEye.make_property_32u(key, data)

def make_property_32f(key, data):
    r"""make_property_32f(key, data) -> sptr_property"""
    return _CubeEye.make_property_32f(key, data)

def make_property_64s(key, data):
    r"""make_property_64s(key, data) -> sptr_property"""
    return _CubeEye.make_property_64s(key, data)

def make_property_64u(key, data):
    r"""make_property_64u(key, data) -> sptr_property"""
    return _CubeEye.make_property_64u(key, data)

def make_property_64f(key, data):
    r"""make_property_64f(key, data) -> sptr_property"""
    return _CubeEye.make_property_64f(key, data)

def make_property_bytes(key, data):
    r"""make_property_bytes(key, data) -> sptr_property"""
    return _CubeEye.make_property_bytes(key, data)

def make_property_string(key, data):
    r"""make_property_string(key, data) -> sptr_property"""
    return _CubeEye.make_property_string(key, data)
class result_property(object):
    r"""Proxy of C++ std::pair< int,sptr_property > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> result_property
        __init__(self, first, second) -> result_property
        __init__(self, other) -> result_property
        """
        _CubeEye.result_property_swiginit(self, _CubeEye.new_result_property(*args))
    first = property(_CubeEye.result_property_first_get, _CubeEye.result_property_first_set, doc=r"""first""")
    second = property(_CubeEye.result_property_second_get, _CubeEye.result_property_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CubeEye.delete_result_property

# Register result_property in _CubeEye:
_CubeEye.result_property_swigregister(result_property)
class Source(object):
    r"""Proxy of C++ Source class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, source):
        r"""__init__(self, source) -> Source"""
        _CubeEye.Source_swiginit(self, _CubeEye.new_Source(source))
    __swig_destroy__ = _CubeEye.delete_Source

    def name(self):
        r"""
        name(self) -> std::string

        Returns name of Source.
        """
        return _CubeEye.Source_name(self)

    def serialNumber(self):
        r"""
        serialNumber(self) -> std::string

        Returns serialNumber of Source.
        """
        return _CubeEye.Source_serialNumber(self)

    def uri(self):
        r"""
        uri(self) -> std::string

        Returns uri of Source.
        """
        return _CubeEye.Source_uri(self)

    def setProperty(self, property):
        r"""
        setProperty(self, property) -> int

        Set Frame property.
        """
        return _CubeEye.Source_setProperty(self, property)

    def getProperty(self, key):
        r"""
        getProperty(self, key) -> result_property

        Get Frame property.
        """
        return _CubeEye.Source_getProperty(self, key)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.Source_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.Source___repr__(self)

# Register Source in _CubeEye:
_CubeEye.Source_swigregister(Source)
class vlist_source(object):
    r"""Proxy of C++ VList< sptr_source > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> vlist_source"""
        _CubeEye.vlist_source_swiginit(self, _CubeEye.new_vlist_source())
    __swig_destroy__ = _CubeEye.delete_vlist_source

    def size(self):
        r"""size(self) -> size_t"""
        return _CubeEye.vlist_source_size(self)

    def at(self, index):
        r"""at(self, index) -> std::shared_ptr< Source > const &"""
        return _CubeEye.vlist_source_at(self, index)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.vlist_source_to_string(self)

    def begin(self):
        r"""begin(self) -> VList< std::shared_ptr< Source > >::iter"""
        return _CubeEye.vlist_source_begin(self)

    def end(self):
        r"""end(self) -> VList< std::shared_ptr< Source > >::iter"""
        return _CubeEye.vlist_source_end(self)

    def __getitem__(self, index):
        r"""__getitem__(self, index) -> std::shared_ptr< Source >"""
        return _CubeEye.vlist_source___getitem__(self, index)

    def __iter__(self):
        r"""__iter__(self) -> vlist_iter_source"""
        return _CubeEye.vlist_source___iter__(self)

# Register vlist_source in _CubeEye:
_CubeEye.vlist_source_swigregister(vlist_source)
class SourceList(vlist_source):
    r"""Proxy of C++ SourceList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.SourceList___repr__(self)

    def __init__(self):
        r"""__init__(self) -> SourceList"""
        _CubeEye.SourceList_swiginit(self, _CubeEye.new_SourceList())
    __swig_destroy__ = _CubeEye.delete_SourceList

# Register SourceList in _CubeEye:
_CubeEye.SourceList_swigregister(SourceList)

def search_camera_source():
    r"""search_camera_source() -> sptr_source_list"""
    return _CubeEye.search_camera_source()

class SourceListener(object):
    r"""Proxy of C++ SourceListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def onAttachedCubeEyeSource(self, name, serialNumber, uri):
        r"""onAttachedCubeEyeSource(self, name, serialNumber, uri)"""
        return _CubeEye.SourceListener_onAttachedCubeEyeSource(self, name, serialNumber, uri)

    def onDetachedCubeEyeSource(self, name, serialNumber, uri):
        r"""onDetachedCubeEyeSource(self, name, serialNumber, uri)"""
        return _CubeEye.SourceListener_onDetachedCubeEyeSource(self, name, serialNumber, uri)
    __swig_destroy__ = _CubeEye.delete_SourceListener

    def __init__(self):
        r"""__init__(self) -> SourceListener"""
        if self.__class__ == SourceListener:
            _self = None
        else:
            _self = self
        _CubeEye.SourceListener_swiginit(self, _CubeEye.new_SourceListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _CubeEye.disown_SourceListener(self)
        return weakref.proxy(self)

# Register SourceListener in _CubeEye:
_CubeEye.SourceListener_swigregister(SourceListener)

def add_external_source(uri, param=None):
    r"""add_external_source(uri, param=None) -> int"""
    return _CubeEye.add_external_source(uri, param)

def remove_external_source(uri):
    r"""remove_external_source(uri) -> int"""
    return _CubeEye.remove_external_source(uri)

def add_source_listener(listener):
    r"""add_source_listener(listener) -> int"""
    return _CubeEye.add_source_listener(listener)

def remove_source_listener(listener):
    r"""remove_source_listener(listener) -> int"""
    return _CubeEye.remove_source_listener(listener)
class vlist_iter_source(object):
    r"""Proxy of C++ VListIterator< sptr_source > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vlist):
        r"""__init__(self, vlist) -> vlist_iter_source"""
        _CubeEye.vlist_iter_source_swiginit(self, _CubeEye.new_vlist_iter_source(vlist))
    __swig_destroy__ = _CubeEye.delete_vlist_iter_source

    def __iter__(self):
        r"""__iter__(self) -> vlist_iter_source"""
        return _CubeEye.vlist_iter_source___iter__(self)
    mCur = property(_CubeEye.vlist_iter_source_mCur_get, _CubeEye.vlist_iter_source_mCur_set, doc=r"""mCur""")
    mEnd = property(_CubeEye.vlist_iter_source_mEnd_get, _CubeEye.vlist_iter_source_mEnd_set, doc=r"""mEnd""")

    def __next__(self):
        r"""__next__(self) -> std::shared_ptr< Source >"""
        return _CubeEye.vlist_iter_source___next__(self)

# Register vlist_iter_source in _CubeEye:
_CubeEye.vlist_iter_source_swigregister(vlist_iter_source)
class Frame(object):
    r"""Proxy of C++ Frame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, frame):
        r"""__init__(self, frame) -> Frame"""
        _CubeEye.Frame_swiginit(self, _CubeEye.new_Frame(frame))
    __swig_destroy__ = _CubeEye.delete_Frame

    def width(self):
        r"""
        width(self) -> int

        Returns width of frame.
        """
        return _CubeEye.Frame_width(self)

    def height(self):
        r"""
        height(self) -> int

        Returns height of frame.
        """
        return _CubeEye.Frame_height(self)

    def frameType(self):
        r"""
        frameType(self) -> int

        Returns frame type.
        """
        return _CubeEye.Frame_frameType(self)

    def dataType(self):
        r"""
        dataType(self) -> int

        Returns frame data type.
        """
        return _CubeEye.Frame_dataType(self)

    def format(self):
        r"""
        format(self) -> std::string

        Returns format of frame.
        """
        return _CubeEye.Frame_format(self)

    def timestamp(self):
        r"""
        timestamp(self) -> uint64_t

        Returns timestamp of frame.
        """
        return _CubeEye.Frame_timestamp(self)

    def setProperty(self, property):
        r"""
        setProperty(self, property) -> int

        Set Frame property.
        """
        return _CubeEye.Frame_setProperty(self, property)

    def getProperty(self, key):
        r"""
        getProperty(self, key) -> result_property

        Get Frame property.
        """
        return _CubeEye.Frame_getProperty(self, key)

    def isBasicFrame(self):
        r"""isBasicFrame(self) -> bool"""
        return _CubeEye.Frame_isBasicFrame(self)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.Frame_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.Frame___repr__(self)

# Register Frame in _CubeEye:
_CubeEye.Frame_swigregister(Frame)

def frame_cast_basic8u(frame):
    r"""frame_cast_basic8u(frame) -> sptr_frame_basic8u"""
    return _CubeEye.frame_cast_basic8u(frame)

def frame_cast_basic16u(frame):
    r"""frame_cast_basic16u(frame) -> sptr_frame_basic16u"""
    return _CubeEye.frame_cast_basic16u(frame)

def frame_cast_basic32f(frame):
    r"""frame_cast_basic32f(frame) -> sptr_frame_basic32f"""
    return _CubeEye.frame_cast_basic32f(frame)
class frame_basic8u(Frame):
    r"""Proxy of C++ BasicFrame< uint8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frame):
        r"""__init__(self, frame) -> frame_basic8u"""
        _CubeEye.frame_basic8u_swiginit(self, _CubeEye.new_frame_basic8u(frame))
    __swig_destroy__ = _CubeEye.delete_frame_basic8u

    def dataPtr(self):
        r"""dataPtr(self) -> unsigned char const *"""
        return _CubeEye.frame_basic8u_dataPtr(self)

    def dataSize(self):
        r"""dataSize(self) -> size_t"""
        return _CubeEye.frame_basic8u_dataSize(self)

# Register frame_basic8u in _CubeEye:
_CubeEye.frame_basic8u_swigregister(frame_basic8u)
class frame_basic16u(Frame):
    r"""Proxy of C++ BasicFrame< uint16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frame):
        r"""__init__(self, frame) -> frame_basic16u"""
        _CubeEye.frame_basic16u_swiginit(self, _CubeEye.new_frame_basic16u(frame))
    __swig_destroy__ = _CubeEye.delete_frame_basic16u

    def dataPtr(self):
        r"""dataPtr(self) -> unsigned short const *"""
        return _CubeEye.frame_basic16u_dataPtr(self)

    def dataSize(self):
        r"""dataSize(self) -> size_t"""
        return _CubeEye.frame_basic16u_dataSize(self)

# Register frame_basic16u in _CubeEye:
_CubeEye.frame_basic16u_swigregister(frame_basic16u)
class frame_basic32f(Frame):
    r"""Proxy of C++ BasicFrame< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frame):
        r"""__init__(self, frame) -> frame_basic32f"""
        _CubeEye.frame_basic32f_swiginit(self, _CubeEye.new_frame_basic32f(frame))
    __swig_destroy__ = _CubeEye.delete_frame_basic32f

    def dataPtr(self):
        r"""dataPtr(self) -> float const *"""
        return _CubeEye.frame_basic32f_dataPtr(self)

    def dataSize(self):
        r"""dataSize(self) -> size_t"""
        return _CubeEye.frame_basic32f_dataSize(self)

# Register frame_basic32f in _CubeEye:
_CubeEye.frame_basic32f_swigregister(frame_basic32f)

def frame_cast_pcl16u(frame):
    r"""frame_cast_pcl16u(frame) -> sptr_frame_pcl16u"""
    return _CubeEye.frame_cast_pcl16u(frame)

def frame_cast_pcl32f(frame):
    r"""frame_cast_pcl32f(frame) -> sptr_frame_pcl32f"""
    return _CubeEye.frame_cast_pcl32f(frame)
class frame_pcl16u(Frame):
    r"""Proxy of C++ PointCloudFrame< uint16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frame):
        r"""__init__(self, frame) -> frame_pcl16u"""
        _CubeEye.frame_pcl16u_swiginit(self, _CubeEye.new_frame_pcl16u(frame))
    __swig_destroy__ = _CubeEye.delete_frame_pcl16u

    def dataXptr(self):
        r"""
        dataXptr(self) -> unsigned short const *

        Returns A CubeEyeList of X position object.
        """
        return _CubeEye.frame_pcl16u_dataXptr(self)

    def dataYptr(self):
        r"""
        dataYptr(self) -> unsigned short const *

        Returns A CubeEyeList of Y position object.
        """
        return _CubeEye.frame_pcl16u_dataYptr(self)

    def dataZptr(self):
        r"""
        dataZptr(self) -> unsigned short const *

        Returns A CubeEyeList of Depth object.
        """
        return _CubeEye.frame_pcl16u_dataZptr(self)

    def dataXsize(self):
        r"""
        dataXsize(self) -> size_t

        Returns data size of X position object.
        """
        return _CubeEye.frame_pcl16u_dataXsize(self)

    def dataYsize(self):
        r"""
        dataYsize(self) -> size_t

        Returns data size of Y position object.
        """
        return _CubeEye.frame_pcl16u_dataYsize(self)

    def dataZsize(self):
        r"""
        dataZsize(self) -> size_t

        Returns data size of Z position object.
        """
        return _CubeEye.frame_pcl16u_dataZsize(self)

# Register frame_pcl16u in _CubeEye:
_CubeEye.frame_pcl16u_swigregister(frame_pcl16u)
class frame_pcl32f(Frame):
    r"""Proxy of C++ PointCloudFrame< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frame):
        r"""__init__(self, frame) -> frame_pcl32f"""
        _CubeEye.frame_pcl32f_swiginit(self, _CubeEye.new_frame_pcl32f(frame))
    __swig_destroy__ = _CubeEye.delete_frame_pcl32f

    def dataXptr(self):
        r"""
        dataXptr(self) -> float const *

        Returns A CubeEyeList of X position object.
        """
        return _CubeEye.frame_pcl32f_dataXptr(self)

    def dataYptr(self):
        r"""
        dataYptr(self) -> float const *

        Returns A CubeEyeList of Y position object.
        """
        return _CubeEye.frame_pcl32f_dataYptr(self)

    def dataZptr(self):
        r"""
        dataZptr(self) -> float const *

        Returns A CubeEyeList of Depth object.
        """
        return _CubeEye.frame_pcl32f_dataZptr(self)

    def dataXsize(self):
        r"""
        dataXsize(self) -> size_t

        Returns data size of X position object.
        """
        return _CubeEye.frame_pcl32f_dataXsize(self)

    def dataYsize(self):
        r"""
        dataYsize(self) -> size_t

        Returns data size of Y position object.
        """
        return _CubeEye.frame_pcl32f_dataYsize(self)

    def dataZsize(self):
        r"""
        dataZsize(self) -> size_t

        Returns data size of Z position object.
        """
        return _CubeEye.frame_pcl32f_dataZsize(self)

# Register frame_pcl32f in _CubeEye:
_CubeEye.frame_pcl32f_swigregister(frame_pcl32f)
class vlist_frame(object):
    r"""Proxy of C++ VList< sptr_frame > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> vlist_frame"""
        _CubeEye.vlist_frame_swiginit(self, _CubeEye.new_vlist_frame())
    __swig_destroy__ = _CubeEye.delete_vlist_frame

    def size(self):
        r"""size(self) -> size_t"""
        return _CubeEye.vlist_frame_size(self)

    def at(self, index):
        r"""at(self, index) -> std::shared_ptr< Frame > const &"""
        return _CubeEye.vlist_frame_at(self, index)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.vlist_frame_to_string(self)

    def begin(self):
        r"""begin(self) -> VList< std::shared_ptr< Frame > >::iter"""
        return _CubeEye.vlist_frame_begin(self)

    def end(self):
        r"""end(self) -> VList< std::shared_ptr< Frame > >::iter"""
        return _CubeEye.vlist_frame_end(self)

    def __getitem__(self, index):
        r"""__getitem__(self, index) -> std::shared_ptr< Frame >"""
        return _CubeEye.vlist_frame___getitem__(self, index)

    def __iter__(self):
        r"""__iter__(self) -> vlist_iter_frame"""
        return _CubeEye.vlist_frame___iter__(self)

# Register vlist_frame in _CubeEye:
_CubeEye.vlist_frame_swigregister(vlist_frame)
class FrameList(vlist_frame):
    r"""Proxy of C++ FrameList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.FrameList___repr__(self)

    def __init__(self):
        r"""__init__(self) -> FrameList"""
        _CubeEye.FrameList_swiginit(self, _CubeEye.new_FrameList())
    __swig_destroy__ = _CubeEye.delete_FrameList

# Register FrameList in _CubeEye:
_CubeEye.FrameList_swigregister(FrameList)

def convert2gray(_in, out):
    r"""convert2gray(_in, out) -> int"""
    return _CubeEye.convert2gray(_in, out)

def convert2bgr(_in, out):
    r"""convert2bgr(_in, out) -> int"""
    return _CubeEye.convert2bgr(_in, out)
class vlist_iter_frame(object):
    r"""Proxy of C++ VListIterator< sptr_frame > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vlist):
        r"""__init__(self, vlist) -> vlist_iter_frame"""
        _CubeEye.vlist_iter_frame_swiginit(self, _CubeEye.new_vlist_iter_frame(vlist))
    __swig_destroy__ = _CubeEye.delete_vlist_iter_frame

    def __iter__(self):
        r"""__iter__(self) -> vlist_iter_frame"""
        return _CubeEye.vlist_iter_frame___iter__(self)
    mCur = property(_CubeEye.vlist_iter_frame_mCur_get, _CubeEye.vlist_iter_frame_mCur_set, doc=r"""mCur""")
    mEnd = property(_CubeEye.vlist_iter_frame_mEnd_get, _CubeEye.vlist_iter_frame_mEnd_set, doc=r"""mEnd""")

    def __next__(self):
        r"""__next__(self) -> std::shared_ptr< Frame >"""
        return _CubeEye.vlist_iter_frame___next__(self)

# Register vlist_iter_frame in _CubeEye:
_CubeEye.vlist_iter_frame_swigregister(vlist_iter_frame)
class Sink(object):
    r"""Proxy of C++ Sink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def name(self):
        r"""
        name(self) -> std::string

        Returns A Name of CubeEyeSink object. 
        """
        return _CubeEye.Sink_name(self)

    def onCubeEyeCameraState(self, name, serialNumber, uri, state):
        r"""
        onCubeEyeCameraState(self, name, serialNumber, uri, state)

        On received CubeEyeCamera state.
        """
        return _CubeEye.Sink_onCubeEyeCameraState(self, name, serialNumber, uri, state)

    def onCubeEyeCameraError(self, name, serialNumber, uri, error):
        r"""
        onCubeEyeCameraError(self, name, serialNumber, uri, error)

        On received CubeEyeCamera error.
        """
        return _CubeEye.Sink_onCubeEyeCameraError(self, name, serialNumber, uri, error)

    def onCubeEyeFrameList(self, name, serialNumber, uri, frames):
        r"""
        onCubeEyeFrameList(self, name, serialNumber, uri, frames)

        On received CubeEyeFrameList object.
        """
        return _CubeEye.Sink_onCubeEyeFrameList(self, name, serialNumber, uri, frames)

    def onCubeEyeMessage(self, name, serialNumber, uri, msg, contentType):
        r"""
        onCubeEyeMessage(self, name, serialNumber, uri, msg, contentType)

        On received message form CubeEye.
        """
        return _CubeEye.Sink_onCubeEyeMessage(self, name, serialNumber, uri, msg, contentType)
    __swig_destroy__ = _CubeEye.delete_Sink

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.Sink___repr__(self)

    def __init__(self):
        r"""__init__(self) -> Sink"""
        if self.__class__ == Sink:
            _self = None
        else:
            _self = self
        _CubeEye.Sink_swiginit(self, _CubeEye.new_Sink(_self, ))
    def __disown__(self):
        self.this.disown()
        _CubeEye.disown_Sink(self)
        return weakref.proxy(self)

# Register Sink in _CubeEye:
_CubeEye.Sink_swigregister(Sink)
class vlist_property(object):
    r"""Proxy of C++ VList< sptr_property > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> vlist_property"""
        _CubeEye.vlist_property_swiginit(self, _CubeEye.new_vlist_property())
    __swig_destroy__ = _CubeEye.delete_vlist_property

    def size(self):
        r"""size(self) -> size_t"""
        return _CubeEye.vlist_property_size(self)

    def at(self, index):
        r"""at(self, index) -> std::shared_ptr< Property > const &"""
        return _CubeEye.vlist_property_at(self, index)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.vlist_property_to_string(self)

    def begin(self):
        r"""begin(self) -> VList< std::shared_ptr< Property > >::iter"""
        return _CubeEye.vlist_property_begin(self)

    def end(self):
        r"""end(self) -> VList< std::shared_ptr< Property > >::iter"""
        return _CubeEye.vlist_property_end(self)

    def __getitem__(self, index):
        r"""__getitem__(self, index) -> std::shared_ptr< Property >"""
        return _CubeEye.vlist_property___getitem__(self, index)

    def __iter__(self):
        r"""__iter__(self) -> vlist_iter_property"""
        return _CubeEye.vlist_property___iter__(self)

# Register vlist_property in _CubeEye:
_CubeEye.vlist_property_swigregister(vlist_property)
class PropertyList(vlist_property):
    r"""Proxy of C++ PropertyList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.PropertyList___repr__(self)

    def __init__(self):
        r"""__init__(self) -> PropertyList"""
        _CubeEye.PropertyList_swiginit(self, _CubeEye.new_PropertyList())
    __swig_destroy__ = _CubeEye.delete_PropertyList

# Register PropertyList in _CubeEye:
_CubeEye.PropertyList_swigregister(PropertyList)
class vlist_iter_property(object):
    r"""Proxy of C++ VListIterator< sptr_property > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vlist):
        r"""__init__(self, vlist) -> vlist_iter_property"""
        _CubeEye.vlist_iter_property_swiginit(self, _CubeEye.new_vlist_iter_property(vlist))
    __swig_destroy__ = _CubeEye.delete_vlist_iter_property

    def __iter__(self):
        r"""__iter__(self) -> vlist_iter_property"""
        return _CubeEye.vlist_iter_property___iter__(self)
    mCur = property(_CubeEye.vlist_iter_property_mCur_get, _CubeEye.vlist_iter_property_mCur_set, doc=r"""mCur""")
    mEnd = property(_CubeEye.vlist_iter_property_mEnd_get, _CubeEye.vlist_iter_property_mEnd_set, doc=r"""mEnd""")

    def __next__(self):
        r"""__next__(self) -> std::shared_ptr< Property >"""
        return _CubeEye.vlist_iter_property___next__(self)

# Register vlist_iter_property in _CubeEye:
_CubeEye.vlist_iter_property_swigregister(vlist_iter_property)
class Properties(object):
    r"""Proxy of C++ Properties class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, properties):
        r"""__init__(self, properties) -> Properties"""
        _CubeEye.Properties_swiginit(self, _CubeEye.new_Properties(properties))
    __swig_destroy__ = _CubeEye.delete_Properties

    def name(self):
        r"""
        name(self) -> std::string

        Returns A Name of CubeEyeProperties object. 
        """
        return _CubeEye.Properties_name(self)

    def contains(self, key):
        r"""
        contains(self, key) -> bool

        Check if the key exists.
        """
        return _CubeEye.Properties_contains(self, key)

    def get(self, key):
        r"""
        get(self, key) -> sptr_property

        Get property.
        """
        return _CubeEye.Properties_get(self, key)

    def add(self, property):
        r"""
        add(self, property) -> int

        adding a new property to list of properties.
        """
        return _CubeEye.Properties_add(self, property)

    def remove(self, *args):
        r"""
        remove(self, key) -> int
        remove(self, property) -> int

        Remove a property from list of properties.
        """
        return _CubeEye.Properties_remove(self, *args)

    def items(self):
        r"""
        items(self) -> sptr_property_list

        Get list of properties.
        """
        return _CubeEye.Properties_items(self)

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.Properties_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.Properties___repr__(self)

# Register Properties in _CubeEye:
_CubeEye.Properties_swigregister(Properties)

def set_properties(properties):
    r"""set_properties(properties) -> int"""
    return _CubeEye.set_properties(properties)


def make_properties(name):
    r"""make_properties(name) -> sptr_properties"""
    return _CubeEye.make_properties(name)
class result_properties(object):
    r"""Proxy of C++ std::pair< int,sptr_properties > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> result_properties
        __init__(self, first, second) -> result_properties
        __init__(self, other) -> result_properties
        """
        _CubeEye.result_properties_swiginit(self, _CubeEye.new_result_properties(*args))
    first = property(_CubeEye.result_properties_first_get, _CubeEye.result_properties_first_set, doc=r"""first""")
    second = property(_CubeEye.result_properties_second_get, _CubeEye.result_properties_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CubeEye.delete_result_properties

# Register result_properties in _CubeEye:
_CubeEye.result_properties_swigregister(result_properties)
class FocalLength(object):
    r"""Proxy of C++ FocalLength class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    fx = property(_CubeEye.FocalLength_fx_get, _CubeEye.FocalLength_fx_set, doc=r"""fx""")
    fy = property(_CubeEye.FocalLength_fy_get, _CubeEye.FocalLength_fy_set, doc=r"""fy""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.FocalLength_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.FocalLength___repr__(self)

    def __init__(self):
        r"""__init__(self) -> FocalLength"""
        _CubeEye.FocalLength_swiginit(self, _CubeEye.new_FocalLength())
    __swig_destroy__ = _CubeEye.delete_FocalLength

# Register FocalLength in _CubeEye:
_CubeEye.FocalLength_swigregister(FocalLength)
class PrincipalPoint(object):
    r"""Proxy of C++ PrincipalPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    cx = property(_CubeEye.PrincipalPoint_cx_get, _CubeEye.PrincipalPoint_cx_set, doc=r"""cx""")
    cy = property(_CubeEye.PrincipalPoint_cy_get, _CubeEye.PrincipalPoint_cy_set, doc=r"""cy""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.PrincipalPoint_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.PrincipalPoint___repr__(self)

    def __init__(self):
        r"""__init__(self) -> PrincipalPoint"""
        _CubeEye.PrincipalPoint_swiginit(self, _CubeEye.new_PrincipalPoint())
    __swig_destroy__ = _CubeEye.delete_PrincipalPoint

# Register PrincipalPoint in _CubeEye:
_CubeEye.PrincipalPoint_swigregister(PrincipalPoint)
class IntrinsicParameters(object):
    r"""Proxy of C++ IntrinsicParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    focal = property(_CubeEye.IntrinsicParameters_focal_get, _CubeEye.IntrinsicParameters_focal_set, doc=r"""focal""")
    principal = property(_CubeEye.IntrinsicParameters_principal_get, _CubeEye.IntrinsicParameters_principal_set, doc=r"""principal""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.IntrinsicParameters_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.IntrinsicParameters___repr__(self)

    def __init__(self):
        r"""__init__(self) -> IntrinsicParameters"""
        _CubeEye.IntrinsicParameters_swiginit(self, _CubeEye.new_IntrinsicParameters())
    __swig_destroy__ = _CubeEye.delete_IntrinsicParameters

# Register IntrinsicParameters in _CubeEye:
_CubeEye.IntrinsicParameters_swigregister(IntrinsicParameters)
class RadialCoefficient(object):
    r"""Proxy of C++ RadialCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    k1 = property(_CubeEye.RadialCoefficient_k1_get, _CubeEye.RadialCoefficient_k1_set, doc=r"""k1""")
    k2 = property(_CubeEye.RadialCoefficient_k2_get, _CubeEye.RadialCoefficient_k2_set, doc=r"""k2""")
    k3 = property(_CubeEye.RadialCoefficient_k3_get, _CubeEye.RadialCoefficient_k3_set, doc=r"""k3""")
    k4 = property(_CubeEye.RadialCoefficient_k4_get, _CubeEye.RadialCoefficient_k4_set, doc=r"""k4""")
    k5 = property(_CubeEye.RadialCoefficient_k5_get, _CubeEye.RadialCoefficient_k5_set, doc=r"""k5""")
    k6 = property(_CubeEye.RadialCoefficient_k6_get, _CubeEye.RadialCoefficient_k6_set, doc=r"""k6""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.RadialCoefficient_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.RadialCoefficient___repr__(self)

    def __init__(self):
        r"""__init__(self) -> RadialCoefficient"""
        _CubeEye.RadialCoefficient_swiginit(self, _CubeEye.new_RadialCoefficient())
    __swig_destroy__ = _CubeEye.delete_RadialCoefficient

# Register RadialCoefficient in _CubeEye:
_CubeEye.RadialCoefficient_swigregister(RadialCoefficient)
class TangentialCoefficient(object):
    r"""Proxy of C++ TangentialCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    p1 = property(_CubeEye.TangentialCoefficient_p1_get, _CubeEye.TangentialCoefficient_p1_set, doc=r"""p1""")
    p2 = property(_CubeEye.TangentialCoefficient_p2_get, _CubeEye.TangentialCoefficient_p2_set, doc=r"""p2""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.TangentialCoefficient_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.TangentialCoefficient___repr__(self)

    def __init__(self):
        r"""__init__(self) -> TangentialCoefficient"""
        _CubeEye.TangentialCoefficient_swiginit(self, _CubeEye.new_TangentialCoefficient())
    __swig_destroy__ = _CubeEye.delete_TangentialCoefficient

# Register TangentialCoefficient in _CubeEye:
_CubeEye.TangentialCoefficient_swigregister(TangentialCoefficient)
class DistortionCoefficients(object):
    r"""Proxy of C++ DistortionCoefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    radial = property(_CubeEye.DistortionCoefficients_radial_get, _CubeEye.DistortionCoefficients_radial_set, doc=r"""radial""")
    tangential = property(_CubeEye.DistortionCoefficients_tangential_get, _CubeEye.DistortionCoefficients_tangential_set, doc=r"""tangential""")
    skewCoefficient = property(_CubeEye.DistortionCoefficients_skewCoefficient_get, _CubeEye.DistortionCoefficients_skewCoefficient_set, doc=r"""skewCoefficient""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.DistortionCoefficients_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.DistortionCoefficients___repr__(self)

    def __init__(self):
        r"""__init__(self) -> DistortionCoefficients"""
        _CubeEye.DistortionCoefficients_swiginit(self, _CubeEye.new_DistortionCoefficients())
    __swig_destroy__ = _CubeEye.delete_DistortionCoefficients

# Register DistortionCoefficients in _CubeEye:
_CubeEye.DistortionCoefficients_swigregister(DistortionCoefficients)
class RotationParameters(object):
    r"""Proxy of C++ RotationParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    r1 = property(_CubeEye.RotationParameters_r1_get, _CubeEye.RotationParameters_r1_set, doc=r"""r1""")
    r2 = property(_CubeEye.RotationParameters_r2_get, _CubeEye.RotationParameters_r2_set, doc=r"""r2""")
    r3 = property(_CubeEye.RotationParameters_r3_get, _CubeEye.RotationParameters_r3_set, doc=r"""r3""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.RotationParameters_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.RotationParameters___repr__(self)

    def __init__(self):
        r"""__init__(self) -> RotationParameters"""
        _CubeEye.RotationParameters_swiginit(self, _CubeEye.new_RotationParameters())
    __swig_destroy__ = _CubeEye.delete_RotationParameters

# Register RotationParameters in _CubeEye:
_CubeEye.RotationParameters_swigregister(RotationParameters)
class TranslationParameters(object):
    r"""Proxy of C++ TranslationParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    tx = property(_CubeEye.TranslationParameters_tx_get, _CubeEye.TranslationParameters_tx_set, doc=r"""tx""")
    ty = property(_CubeEye.TranslationParameters_ty_get, _CubeEye.TranslationParameters_ty_set, doc=r"""ty""")
    tz = property(_CubeEye.TranslationParameters_tz_get, _CubeEye.TranslationParameters_tz_set, doc=r"""tz""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.TranslationParameters_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.TranslationParameters___repr__(self)

    def __init__(self):
        r"""__init__(self) -> TranslationParameters"""
        _CubeEye.TranslationParameters_swiginit(self, _CubeEye.new_TranslationParameters())
    __swig_destroy__ = _CubeEye.delete_TranslationParameters

# Register TranslationParameters in _CubeEye:
_CubeEye.TranslationParameters_swigregister(TranslationParameters)
class ExtrinsicParameters(object):
    r"""Proxy of C++ ExtrinsicParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    rotation = property(_CubeEye.ExtrinsicParameters_rotation_get, _CubeEye.ExtrinsicParameters_rotation_set, doc=r"""rotation""")
    translation = property(_CubeEye.ExtrinsicParameters_translation_get, _CubeEye.ExtrinsicParameters_translation_set, doc=r"""translation""")

    def to_string(self):
        r"""to_string(self) -> std::string"""
        return _CubeEye.ExtrinsicParameters_to_string(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.ExtrinsicParameters___repr__(self)

    def __init__(self):
        r"""__init__(self) -> ExtrinsicParameters"""
        _CubeEye.ExtrinsicParameters_swiginit(self, _CubeEye.new_ExtrinsicParameters())
    __swig_destroy__ = _CubeEye.delete_ExtrinsicParameters

# Register ExtrinsicParameters in _CubeEye:
_CubeEye.ExtrinsicParameters_swigregister(ExtrinsicParameters)
class Camera(object):
    r"""Proxy of C++ Camera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, camera):
        r"""__init__(self, camera) -> Camera"""
        _CubeEye.Camera_swiginit(self, _CubeEye.new_Camera(camera))
    __swig_destroy__ = _CubeEye.delete_Camera

    def cameraState(self):
        r"""
        cameraState(self) -> int

        Returns state of this camera.
        """
        return _CubeEye.Camera_cameraState(self)

    def name(self):
        r"""
        name(self) -> std::string

        Returns name of this camera
        """
        return _CubeEye.Camera_name(self)

    def serialNumber(self):
        r"""
        serialNumber(self) -> std::string

        Returns serial number of this camera
        """
        return _CubeEye.Camera_serialNumber(self)

    def uri(self):
        r"""
        uri(self) -> std::string

        Returns uri of this camera
        """
        return _CubeEye.Camera_uri(self)

    def lenses(self):
        r"""
        lenses(self) -> size_t

        Returns lenses of this camera
        """
        return _CubeEye.Camera_lenses(self)

    def fov(self, idx=0):
        r"""
        fov(self, idx=0) -> fov

        Returns fov of this camera
        """
        return _CubeEye.Camera_fov(self, idx)

    def cameraType(self, idx=0):
        r"""
        cameraType(self, idx=0) -> int

        Returns state of a camera
        """
        return _CubeEye.Camera_cameraType(self, idx)

    def intrinsicParameters(self, intrinsic, idx=0):
        r"""
        intrinsicParameters(self, intrinsic, idx=0) -> int

        Returns Intrinsic Parameters of lens.
        """
        return _CubeEye.Camera_intrinsicParameters(self, intrinsic, idx)

    def distortionCoefficients(self, distortion, idx=0):
        r"""
        distortionCoefficients(self, distortion, idx=0) -> int

        Returns Distortion Coefficients of lens.
        """
        return _CubeEye.Camera_distortionCoefficients(self, distortion, idx)

    def extrinsicParameters(self, extrinsic, idx0=0, idx1=1):
        r"""
        extrinsicParameters(self, extrinsic, idx0=0, idx1=1) -> int

        Returns Extrinsic Parameters of between lens0 and lens1.
        """
        return _CubeEye.Camera_extrinsicParameters(self, extrinsic, idx0, idx1)

    def prepare(self):
        r"""
        prepare(self) -> int

        Prepare this camera.
        """
        return _CubeEye.Camera_prepare(self)

    def prepareAsync(self):
        r"""
        prepareAsync(self) -> int

        Prepare with asynchronous.
        """
        return _CubeEye.Camera_prepareAsync(self)

    def run(self, *args):
        r"""
        run(self, wantedFrame=meere::sensor::FrameType::Depth|meere::sensor::FrameType::Amplitude) -> int

        Run this camera.
        """
        return _CubeEye.Camera_run(self, *args)

    def stop(self):
        r"""
        stop(self) -> int

        Stop this camera.
        """
        return _CubeEye.Camera_stop(self)

    def release(self):
        r"""
        release(self) -> int

        Release this camera.
        """
        return _CubeEye.Camera_release(self)

    def setProperty(self, property):
        r"""
        setProperty(self, property) -> int

        Set Camera property.
        """
        return _CubeEye.Camera_setProperty(self, property)

    def setProperties(self, properties):
        r"""
        setProperties(self, properties) -> int

        Set Camera properties.
        """
        return _CubeEye.Camera_setProperties(self, properties)

    def getProperty(self, key):
        r"""
        getProperty(self, key) -> result_property

        Get Camera property.
        """
        return _CubeEye.Camera_getProperty(self, key)

    def getProperties(self, name):
        r"""
        getProperties(self, name) -> result_properties

        Get Camera properties.
        """
        return _CubeEye.Camera_getProperties(self, name)

    def addSink(self, sink):
        r"""
        addSink(self, sink) -> int

        Adding a new CubeEyeSink object
        """
        return _CubeEye.Camera_addSink(self, sink)

    def removeSink(self, *args):
        r"""
        removeSink(self, sink) -> int
        removeSink(self, sinkName) -> int

        Removing a CubeEyeSink object.
        """
        return _CubeEye.Camera_removeSink(self, *args)

    def removeAllSinks(self):
        r"""
        removeAllSinks(self) -> int

        Removing all CubeEyeSink objects.
        """
        return _CubeEye.Camera_removeAllSinks(self)

    def containsSink(self, sinkName):
        r"""
        containsSink(self, sinkName) -> bool

        True if this camera contains a mapping for the name of Sink.
        """
        return _CubeEye.Camera_containsSink(self, sinkName)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _CubeEye.Camera___repr__(self)

# Register Camera in _CubeEye:
_CubeEye.Camera_swigregister(Camera)

def create_camera(source):
    r"""create_camera(source) -> sptr_camera"""
    return _CubeEye.create_camera(source)

def destroy_camera(camera):
    r"""destroy_camera(camera) -> int"""
    return _CubeEye.destroy_camera(camera)


def last_released_date():
    r"""last_released_date() -> std::string"""
    return _CubeEye.last_released_date()

def last_released_version():
    r"""last_released_version() -> std::string"""
    return _CubeEye.last_released_version()

def get_property(key):
    r"""get_property(key) -> result_property"""
    return _CubeEye.get_property(key)

def get_properties(name):
    r"""get_properties(name) -> result_properties"""
    return _CubeEye.get_properties(name)
class fov(object):
    r"""Proxy of C++ std::pair< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> fov
        __init__(self, first, second) -> fov
        __init__(self, other) -> fov
        """
        _CubeEye.fov_swiginit(self, _CubeEye.new_fov(*args))
    first = property(_CubeEye.fov_first_get, _CubeEye.fov_first_set, doc=r"""first""")
    second = property(_CubeEye.fov_second_get, _CubeEye.fov_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CubeEye.delete_fov

# Register fov in _CubeEye:
_CubeEye.fov_swigregister(fov)

